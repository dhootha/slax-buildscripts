#!/bin/bash

# Written by Manfred Mueller <manfred.mueller@fluxflux.net>
#
# Copyright (c) 2013  Manfred Mueller, Muelheim, Germany
#
#   Permission to use, copy, modify, and distribute this software for
#   any purpose with or without fee is hereby granted, provided that
#   the above copyright notice and this permission notice appear in all
#   copies.
#
#   THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#   IN NO EVENT SHALL THE AUTHORS AND COPYRIGHT HOLDERS AND THEIR
#   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE.
# -----------------------------------------------------------------------------

. /usr/share/slax/slaxbuildlib


SLAX_BUNDLE_NAME="LFS-systemd-ToolChain"

SLAX_BUNDLE_VERSION="20140412-systemd"
# SLAX_BUNDLE_VERSION="systemd"

SLAX_BUNDLE_DESCRIPTION="Tool chain for build LFS"

SLAX_BUNDLE_CATEGORIES="devel"

SLAX_BUNDLES_REQUIRED=""

SLAX_BUNDLES_REQUIRED_TO_COMPILE_ONLY="bison m4"

SLAX_BUNDLE_MAINTAINER_NAME="lht"
SLAX_BUNDLE_MAINTAINER_EMAIL="holylight@gmail.com"

case ${SLAX_BUNDLE_VERSION} in
    "systemd" )
	lfs_version=${SLAX_BUNDLE_VERSION/systemd/stable-systemd} ;;
    "*-" )
	lfs_version=${SLAX_BUNDLE_VERSION#*-} ;;
esac

SLAX_BUNDLE_SOURCE_DOWNLOAD[0]="http://www.linuxfromscratch.org/lfs/view/${lfs_version}/wget-list"
SLAX_BUNDLE_SOURCE_DOWNLOAD[1]="http://www.linuxfromscratch.org/lfs/view/${lfs_version}/md5sums"
SLAX_BUNDLE_SOURCE_DOWNLOAD[2]=""

check_variables_for_errors
activate_required_bundles

TOOLCHAIN=/lfs-tools
LFS=/tmp/lfs
LFS_TAR_POOL=$HOME/lfs-sources
LFS_BIN_PATH=$LFS/$TOOLCHAIN
LFS_SRC=$LFS/srcs
LFS_BUILD=$LFS/builds
LC_ALL=POSIX
LFS_TGT=$(uname -m)-lfs-linux-gnu
PATH=$TOOLCHAIN/bin:/bin:/usr/bin
export LFS LC_ALL LFS_TGT PATH
# Not safe for build gcc
# export MAKEFLAGS='-j 2'
SBU=3
umask 022

mkdir -pv $LFS_TAR_POOL
pushd $LFS_TAR_POOL || exit 1
#########################################################
# Download wget-list and md5sums
#########################################################
download_all_sources
[ -f wget-list ] || exit 1

# SAVEIFS=$IFS
# IFS=" "
i=0
for url in $(cat $LFS_TAR_POOL/wget-list); do
    SLAX_BUNDLE_SOURCE_DOWNLOAD[$i]=$url
    # echo "Prepare: ${SLAX_BUNDLE_SOURCE_DOWNLOAD[$i]}"
    ((i++))
done
# IFS=$SAVEIFS

#########################################################
# Download source tarballs
#########################################################
download_all_sources
md5sum --quiet -c $LFS_TAR_POOL/md5sums
popd

mkdir -pv $LFS_BIN_PATH
rm -rf $TOOLCHAIN
ln -sv $LFS_BIN_PATH $TOOLCHAIN

if [ ! -d $LFS/$TOOLCHAIN -o ! -L /$TOOLCHAIN ]; then
    echo "Make sure $LFS/$TOOLCHAIN is created and linked to /$TOOLCHAIN, required by gcc linker search path."
    exit 1
fi

case $(uname -m) in
  x86_64) mkdir -v $TOOLCHAIN/lib && ln -sv lib $TOOLCHAIN/lib64 ;;
esac

mkdir -pv $LFS_SRC
mkdir -pv $LFS_BUILD
pushd $LFS_BUILD || exit 1

# extract_all_sources
prepare_source_build()
{
    local src=$1
    local i
    for i in "${SLAX_BUNDLE_SOURCE_DOWNLOAD[@]}"; do
	i=${i##*\/}
	if echo "$i" | egrep -v "\.(patch|diff)\$" | egrep -q "^${src}"; then
            tar -xf $LFS_TAR_POOL/$i -C $LFS_SRC || exit 1
	    mkdir -v $LFS_BUILD/$src || exit 1
	    echo "Uncompressed $i."
	fi
    done
}

# Toolchain PASS 1
#
prepare_source_build binutils
pushd binutils
$LFS_SRC/binutils-2.24/configure     \
    --prefix=$TOOLCHAIN            \
    --with-sysroot=$LFS        \
    --with-lib-path=$TOOLCHAIN/lib \
    --target=$LFS_TGT          \
    --disable-nls              \
    --disable-werror

if [ $? = 0 ]; then
    make -j $SBU || make || exit 1
    make install
fi
popd

prepare_source_build mpfr
prepare_source_build gmp
prepare_source_build mpc
prepare_source_build gcc
pushd $LFS_SRC/gcc-4.8.2
ln -sv ../mpfr-* mpfr
ln -sv ../gmp-* gmp
ln -sv ../mpc-* mpc

for file in \
 $(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
do
  cp -uv $file{,.orig}
  sed -e "s@/lib\(64\)\?\(32\)\?/ld@${TOOLCHAIN}&@g" \
      -e "s@/usr@${TOOLCHAIN}@g" $file.orig > $file
  echo "
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 \"${TOOLCHAIN}/lib/\"
#define STANDARD_STARTFILE_PREFIX_2 \"\"" >> $file
  touch $file.orig
done
sed -i '/k prot/agcc_cv_libc_provides_ssp=yes' gcc/configure
popd

pushd gcc
$LFS_SRC/gcc-4.8.2/configure     \
    --target=$LFS_TGT                                \
    --prefix=${TOOLCHAIN}                                  \
    --with-sysroot=$LFS                              \
    --with-newlib                                    \
    --without-headers                                \
    --with-local-prefix=${TOOLCHAIN}                       \
    --with-native-system-header-dir=${TOOLCHAIN}/include   \
    --disable-nls                                    \
    --disable-shared                                 \
    --disable-multilib                               \
    --disable-decimal-float                          \
    --disable-threads                                \
    --disable-libatomic                              \
    --disable-libgomp                                \
    --disable-libitm                                 \
    --disable-libmudflap                             \
    --disable-libquadmath                            \
    --disable-libsanitizer                           \
    --disable-libssp                                 \
    --disable-libstdc++-v3                           \
    --enable-languages=c,c++                         \
    --with-mpfr-include=$LFS_SRC/gcc-4.8.2/mpfr/src \
    --with-mpfr-lib=$(pwd)/mpfr/src/.libs

if [ $? = 0 ]; then
    make || exit 1
    make install
    ln -sv libgcc.a `$LFS_TGT-gcc -print-libgcc-file-name | sed 's/libgcc/&_eh/'`
fi
popd

prepare_source_build linux
pushd $LFS_SRC/linux-3.14
make mrproper
make INSTALL_HDR_PATH=dest headers_install
cp -rv dest/include/* ${TOOLCHAIN}/include
popd

prepare_source_build glibc
pushd glibc
if [ ! -r /usr/include/rpc/types.h ]; then
  su -c 'mkdir -pv /usr/include/rpc'
  su -c 'cp -v sunrpc/rpc/*.h /usr/include/rpc'
fi

$LFS_SRC/glibc-2.19/configure     \
      --prefix=${TOOLCHAIN}                               \
      --host=$LFS_TGT                               \
      --build=$($LFS_SRC/${MODULE}*/scripts/config.guess) \
      --disable-profile                             \
      --enable-kernel=2.6.32                        \
      --with-headers=${TOOLCHAIN}/include                 \
      libc_cv_forced_unwind=yes                     \
      libc_cv_ctors_header=yes                      \
      libc_cv_c_cleanup=yes

if [ $? = 0 ]; then
    make || exit 1
    make install
fi
popd

# Now test
#
echo 'main(){}' > dummy.c
$LFS_TGT-gcc dummy.c || exit 1
readelf -l a.out | grep ": ${TOOLCHAIN}"
rm -v dummy.c a.out

mkdir -v libstdc++
pushd libstdc++
$LFS_SRC/gcc-4.8.2/libstdc++-v3/configure                    \
    --host=$LFS_TGT                 \
    --prefix=${TOOLCHAIN}                 \
    --disable-multilib              \
    --disable-shared                \
    --disable-nls                   \
    --disable-libstdcxx-threads     \
    --disable-libstdcxx-pch         \
    --with-gxx-include-dir=${TOOLCHAIN}/$LFS_TGT/include/c++/4.8.2

if [ $? = 0 ]; then
    make -j $SBU || make || exit 1
    make install
fi
popd

# Toolchain PASS 2
#
mkdir -v binutils_pass2
pushd binutils_pass2
CC=$LFS_TGT-gcc                \
    AR=$LFS_TGT-ar             \
    RANLIB=$LFS_TGT-ranlib     \
    $LFS_SRC/binutils-2.24/configure       \
    --prefix=$TOOLCHAIN        \
    --disable-nls              \
    --with-lib-path=$TOOLCHAIN/lib \
    --with-sysroot

if [ $? = 0 ]; then
    make -j $SBU || make || exit 1
    make install
    make -C ld clean
    make -C ld LIB_PATH=/usr/lib:/lib
    cp -v ld/ld-new $TOOLCHAIN/bin
fi
popd

pushd $LFS_SRC/gcc-4.8.2
cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
    `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h
case `uname -m` in
    i?86) sed -i 's/^T_CFLAGS =$/& -fomit-frame-pointer/' gcc/Makefile.in ;;
esac
for file in \
 $(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
do
  cp -uv $file{,.orig}
  sed -e "s@/lib\(64\)\?\(32\)\?/ld@${TOOLCHAIN}&@g" \
      -e "s@/usr@${TOOLCHAIN}@g" $file.orig > $file
  echo "
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 \"${TOOLCHAIN}/lib/\"
#define STANDARD_STARTFILE_PREFIX_2 \"\"" >> $file
  touch $file.orig
done
ln -sv ../mpfr-* mpfr
ln -sv ../gmp-* gmp
ln -sv ../mpc-* mpc
popd

mkdir -v gcc_pass2
pushd gcc_pass2
$LFS_SRC/gcc-4.8.2/configure                               \
    --prefix=${TOOLCHAIN}                                  \
    --with-local-prefix=${TOOLCHAIN}                       \
    --with-native-system-header-dir=${TOOLCHAIN}/include   \
    --enable-clocale=gnu                             \
    --enable-shared                                  \
    --enable-threads=posix                           \
    --enable-__cxa_atexit                            \
    --enable-languages=c,c++                         \
    --disable-libstdcxx-pch                          \
    --disable-multilib                               \
    --disable-bootstrap                              \
    --disable-libgomp                                \
    --with-mpfr-include=$LFS_SRC/gcc-4.8.2/mpfr/src \
    --with-mpfr-lib=$(pwd)/mpfr/src/.libs

if [ $? = 0 ]; then
    make || exit 1
    make install
    ln -sv gcc $TOOLCHAIN/bin/cc
fi
popd

# Now test
#
echo 'main(){}' > dummy.c
cc dummy.c || exit 1
readelf -l a.out | grep ": ${TOOLCHAIN}"
rm -v dummy.c a.out

prepare_source_build tcl
pushd tcl
$LFS_SRC/tcl8.6.1/unix/configure --prefix=${TOOLCHAIN}
make -j $SBU || make || exit 1
TZ=UTC make test
make install
chmod -v u+w ${TOOLCHAIN}/lib/libtcl8.6.so
make install-private-headers
ln -sv tclsh8.6 ${TOOLCHAIN}/bin/tclsh
popd

prepare_source_build expect
pushd $LFS_SRC/expect5.45
cp -v configure{,.orig}
sed 's:/usr/local/bin:/bin:' configure.orig > configure
popd

pushd expect
$LFS_SRC/expect5.45/configure --prefix=${TOOLCHAIN}       \
    --with-tcl=${TOOLCHAIN}/lib \
    --with-tclinclude=${TOOLCHAIN}/include
make -j $SBU || make || exit 1
make test
make SCRIPTS="" install
popd

prepare_source_build dejagnu
pushd dejagnu
$LFS_SRC/dejagnu-1.5.1/configure --prefix=${TOOLCHAIN}
make install
make check
popd

prepare_source_build check
pushd check
PKG_CONFIG= $LFS_SRC/check-0.9.12/configure --prefix=${TOOLCHAIN}
make -j $SBU || make || exit 1
make check
make install
popd

prepare_source_build ncurses
pushd ncurses
$LFS_SRC/ncurses-5.9/configure --prefix=${TOOLCHAIN} \
            --with-shared   \
            --without-debug \
            --without-ada   \
            --enable-widec  \
            --enable-overwrite
make -j $SBU || make || exit 1
make install
popd

prepare_source_build bash
pushd bash
$LFS_SRC/bash-4.3/configure --prefix=${TOOLCHAIN} --without-bash-malloc
make -j $SBU || make || exit 1
make tests
make install
ln -sv bash ${TOOLCHAIN}/bin/sh
popd

prepare_source_build bzip2
pushd $LSR_SRC/bzip2-1.0.6
make -j $SBU || make || exit 1
make PREFIX=${TOOLCHAIN} install
popd

prepare_source_build coreutils
pushd coreutils
export FORCE_UNSAFE_CONFIGURE=1
$LFS_SRC/coreutils-8.22/configure --prefix=${TOOLCHAIN} --enable-install-program=hostname
make -j $SBU || make || exit 1
make RUN_EXPENSIVE_TESTS=yes check
make install
unset FORCE_UNSAFE_CONFIGURE
popd

prepare_source_build diffutils
pushd diffutils
$LFS_SRC/diffutils-3.3/configure --prefix=${TOOLCHAIN}
make -j $SBU || make || exit 1
make check
make install
popd

prepare_source_build findutils
pushd findutils
$LFS_SRC/findutils-4.4.2/configure --prefix=${TOOLCHAIN}
make -j $SBU || make || exit 1
make check
make install
popd

prepare_source_build gawk
pushd gawk
$LFS_SRC/gawk-4.1.0/configure --prefix=${TOOLCHAIN}
make -j $SBU || make || exit 1
make check
make install
popd

prepare_source_build gettext
pushd gettext
EMACS="no" $lfs_src/gettext-0.18.3.2/gettext-tools/configure --prefix=${TOOLCHAIN} --disable-shared
make -C gnulib-lib
make -C src msgfmt
make -C src msgmerge
make -C src xgettext
cp -v src/{msgfmt,msgmerge,xgettext} ${TOOLCHAIN}/bin
popd

prepare_source_build grep
pushd grep
$LFS_SRC/grep-2.18/configure --prefix=${TOOLCHAIN}
make -j $SBU || make || exit 1
make check
make install
popd

prepare_source_build gzip
pushd gzip
$LFS_SRC/gzip-1.6/configure --prefix=${TOOLCHAIN}
make -j $SBU || make || exit 1
make check
make install
popd

prepare_source_build m4
pushd m4
$LFS_SRC/m4-1.4.17/configure --prefix=${TOOLCHAIN}
make -j $SBU || make || exit 1
make check
make install
popd

prepare_source_build make
pushd make
$LFS_SRC/make-4.0/configure --prefix=${TOOLCHAIN} --without-guile
make -j $SBU || make || exit 1
make check
make install
popd

prepare_source_build patch
pushd patch
$LFS_SRC/patch-2.7.1/configure --prefix=${TOOLCHAIN}
make -j $SBU || make || exit 1
make check
make install
popd

prepare_source_build perl
pushd $LFS_SRC/perl-5.18.2
patch -Np1 -i $LFS_TAR_POOL/perl-5.18.2-libc-1.patch
popd
pushd perl
# Building Perl outside of the source directory: -Dmksymlinks
sh $LFS_SRC/perl-5.18.2/Configure -Dmksymlinks -des -Dprefix=${TOOLCHAIN}
make -j $SBU || make || exit 1
cp -v perl cpan/podlators/pod2man ${TOOLCHAIN}/bin
mkdir -pv ${TOOLCHAIN}/lib/perl5/5.18.2
cp -Rv lib/* ${TOOLCHAIN}/lib/perl5/5.18.2
popd

prepare_source_build sed
pushd sed
$LFS_SRC/sed-4.2.2/configure --prefix=${TOOLCHAIN}
make -j $SBU || make || exit 1
make check
make install
popd

prepare_source_build tar
pushd tar
export FORCE_UNSAFE_CONFIGURE=1
$LFS_SRC/tar-1.27.1/configure --prefix=${TOOLCHAIN}
make -j $SBU || make || exit 1
make check
make install
unset FORCE_UNSAFE_CONFIGURE
popd

prepare_source_build texinfo
pushd texinfo
$LFS_SRC/texinfo-5.2/configure --prefix=${TOOLCHAIN}
make -j $SBU || make || exit 1
make check
make install
popd

prepare_source_build util-linux
pushd util-linux
$LFS_SRC/util-linux-2.24.1/configure --prefix=${TOOLCHAIN} \
    --disable-makeinstall-chown    \
    --without-systemdsystemunitdir \
    PKG_CONFIG=""

make -j $SBU || make || exit 1
make install
popd

prepare_source_build xz
pushd xz
$LFS_SRC/xz-5.0.5/configure --prefix=${TOOLCHAIN}
make -j $SBU || make || exit 1
make check
make install
popd

export PATH=$PATH:/sbin:/usr/sbin
# strip_unneeded_objects
strip --strip-debug ${TOOLCHAIN}/lib/*
/usr/bin/strip --strip-unneeded ${TOOLCHAIN}/{,s}bin/*
rm -rf ${TOOLCHAIN}/{,share}/{info,man,doc}
# chown -R root:root $LFS${TOOLCHAIN}

init_bundle_target_dir
rsync -a $LFS/$TOOLCHAIN $SLAX_BUNDLE_TARGET

create_slax_bundle
